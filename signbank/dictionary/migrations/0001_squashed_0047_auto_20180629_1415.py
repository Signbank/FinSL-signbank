# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2020-01-13 20:34
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
from datetime import timezone

# signbank.dictionary.migrations.0020_auto_20160913_1404
def generate_signlanguage(apps, schema_editor):
    """
    Trying to generate a SignLanguage so that migrating is possible when app already has data.
    If the state of the app in the previous migration has a dataset, it is impossible to reference to SignLanguage,
    as the ForeignKey, because one does not exist. Here we try to create it, if objects.get does not find one.
    """
    SignLanguageModel = apps.get_model('dictionary', 'SignLanguage')
    try:
        SignLanguageModel.objects.get(id=1)
    except SignLanguageModel.DoesNotExist:
        SignLanguageModel.objects.create(id=1, name='TestSignLanguage', language_code_3char='tst')

# signbank.dictionary.migrations.0023_auto_20170310_1251
def set_langnames(apps, schema_editor):
    Language = apps.get_model('dictionary', 'Language')
    # Set name_en for each Language from name
    for lang in Language.objects.all().iterator():
        lang.name_en = lang.name
        lang.save()

# signbank.dictionary.migrations.0035_remove_gloss_url_field
def move_url_fields_to_glossurl(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Gloss = apps.get_model("dictionary", "Gloss")
    GlossURL = apps.get_model("dictionary", "GlossURL")

    # Get all glosses that have something in 'url_field'.
    glosses_with_url_field = Gloss.objects.exclude(url_field__exact='').exclude(url_field__isnull=True)

    # If there are glosses with data in 'url_field', move that data to GlossURL model by creating new instances.
    if glosses_with_url_field.count() > 0:
        for gloss in glosses_with_url_field:
            try:
                # Create a GlossURL object out of the gloss.url_field data.
                GlossURL.objects.create(gloss=gloss, url=gloss.url_field)
            except:
                # If creation fails, jump to the next object in the QuerySet. (We might have this url already).
                continue
            try:
                # Make the gloss.url_field an empty string and save changes.
                gloss.url_field = ''
                gloss.save()
            except:
                # Do nothing, because the migration will delete the field anyway.
                # You can write your own logic here, for instance if you want to cancel the whole operation.
                pass


class Migration(migrations.Migration):

    replaces = [('dictionary', '0001_initial'), ('dictionary', '0002_auto_20150807_1048'), ('dictionary', '0003_keywordenglish_translationenglish'), ('dictionary', '0004_auto_20150811_1559'), ('dictionary', '0005_gloss_url_field'), ('dictionary', '0006_auto_20150828_0933'), ('dictionary', '0007_auto_20151016_1346'), ('dictionary', '0008_auto_20151030_1125'), ('dictionary', '0009_auto_20151106_1019'), ('dictionary', '0010_auto_20151221_1654'), ('dictionary', '0011_auto_20160205_1258'), ('dictionary', '0012_auto_20160323_1408'), ('dictionary', '0013_auto_20160323_1455'), ('dictionary', '0014_language_language_code'), ('dictionary', '0015_auto_20160517_1519'), ('dictionary', '0016_auto_20160517_1552'), ('dictionary', '0017_auto_20160828_1417'), ('dictionary', '0018_auto_20160902_1626'), ('dictionary', '0019_auto_20160902_1857'), ('dictionary', '0020_auto_20160913_1404'), ('dictionary', '0021_auto_20161121_1310'), ('dictionary', '0022_auto_20161201_0826'), ('dictionary', '0023_auto_20170310_1251'), ('dictionary', '0024_glosstranslations'), ('dictionary', '0025_auto_20170313_1341'), ('dictionary', '0026_auto_20170511_1920'), ('dictionary', '0027_glossrelation'), ('dictionary', '0028_glossurl'), ('dictionary', '0029_auto_20170626_1149'), ('dictionary', '0030_auto_20170810_1248'), ('dictionary', '0031_auto_20170920_1051'), ('dictionary', '0032_auto_20170920_1307'), ('dictionary', '0033_allowedtags'), ('dictionary', '0034_auto_20170925_1530'), ('dictionary', '0035_remove_gloss_url_field'), ('dictionary', '0036_auto_20170927_1409'), ('dictionary', '0037_remove_gloss_in_web_dictionary'), ('dictionary', '0038_auto_20171017_1242'), ('dictionary', '0039_auto_20180326_1757'), ('dictionary', '0040_auto_20180330_1300'), ('dictionary', '0041_auto_20180418_1218'), ('dictionary', '0042_auto_20180605_1716'), ('dictionary', '0043_auto_20180605_1726'), ('dictionary', '0044_auto_20180605_1747'), ('dictionary', '0045_dataset_admins'), ('dictionary', '0046_auto_20180608_1521'), ('dictionary', '0047_auto_20180629_1415')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tagging', '0002_on_delete'),
    ]

    operations = [
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('role', models.CharField(choices=[('note', 'Note'), ('privatenote', 'Private Note'), ('phon', 'Phonology'), ('todo', 'To Do'), ('sugg', 'Suggestion for other gloss')], max_length=20, verbose_name='Type')),
                ('count', models.IntegerField()),
                ('published', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['gloss', 'role', 'count'],
            },
        ),
        migrations.CreateModel(
            name='Dialect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['language', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('english_name', models.CharField(max_length=50)),
                ('machine_value', models.IntegerField(unique=True)),
            ],
            options={
                'ordering': ['field', 'machine_value'],
            },
        ),
        migrations.CreateModel(
            name='Gloss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idgloss', models.CharField(help_text='\n    This is the unique identifying name of an entry of a sign form in the\ndatabase. No two Sign Entry Names can be exactly the same, but a "Sign\nEntry Name" can be (and often is) the same as the Annotation Idgloss.', max_length=50, verbose_name='Gloss')),
                ('annotation_idgloss_jkl', models.CharField(blank=True, help_text="\n    This is the Jyvaskyla name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Jyvaskyla Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=30, verbose_name='Gloss JKL')),
                ('annotation_idgloss_jkl_en', models.CharField(blank=True, help_text='\n    This is the English name for the corresponding Jyvaskyla Gloss', max_length=30, verbose_name='Gloss JKL (Eng)')),
                ('annotation_idgloss_hki', models.CharField(blank=True, help_text="\n    This is the Helsinki name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Helsinki Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=30, verbose_name='Gloss HKI')),
                ('annotation_idgloss_hki_en', models.CharField(blank=True, help_text='\n    This is the English name for the corresponding Jyvaskyla Gloss', max_length=30, verbose_name='Gloss HKI (Eng)')),
                ('annotation_comments', models.CharField(blank=True, max_length=50, verbose_name='Annotation comments')),
                ('sense', models.IntegerField(blank=True, help_text='If there is more than one sense of a sign enter a number here,\n                                       all signs with sense>1 will use the same video as sense=1', null=True, verbose_name='Sense Number')),
                ('sn', models.IntegerField(blank=True, help_text='Sign Number must be a unique integer and defines the ordering of signs in the dictionary', null=True, unique=True, verbose_name='Sign Number')),
                ('repeated_movement', models.NullBooleanField(default=False, verbose_name='Repeated Movement')),
                ('alternating_movement', models.NullBooleanField(default=False, verbose_name='Alternating Movement')),
                ('phonology_other', models.TextField(blank=True, null=True, verbose_name='Phonology Other')),
                ('mouth_gesture', models.CharField(blank=True, max_length=50, verbose_name='Mouth Gesture')),
                ('mouthing', models.CharField(blank=True, max_length=50, verbose_name='Mouthing')),
                ('phonetic_variation', models.CharField(blank=True, max_length=50, verbose_name='Phonetic Variation')),
                ('iconic_image', models.CharField(blank=True, max_length=50, verbose_name='Iconic Image')),
                ('number_of_occurences', models.IntegerField(blank=True, help_text='Number of occurences in annotation materials', null=True, verbose_name='Number of Occurrences')),
                ('in_web_dictionary', models.NullBooleanField(default=False, verbose_name='In the Web dictionary')),
                ('is_proposed_new_sign', models.NullBooleanField(default=False, verbose_name='Is this a proposed new sign?')),
                ('absolute_orientation_fingers', models.ForeignKey(db_column='absolute_orientation_fingers', on_delete=django.db.models.deletion.CASCADE, related_name='absolute_orientation_fingers', to='dictionary.FieldChoice', to_field='machine_value')),
                ('absolute_orientation_palm', models.ForeignKey(db_column='absolute_orientation_palm', on_delete=django.db.models.deletion.CASCADE, related_name='absolute_orientation_palm', to='dictionary.FieldChoice', to_field='machine_value')),
                ('contact_type', models.ForeignKey(db_column='contact_type', on_delete=django.db.models.deletion.CASCADE, related_name='contact_type', to='dictionary.FieldChoice', to_field='machine_value')),
                ('dialect', models.ManyToManyField(to='dictionary.Dialect')),
                ('handedness', models.ForeignKey(db_column='handedness', on_delete=django.db.models.deletion.CASCADE, related_name='handedness', to='dictionary.FieldChoice', to_field='machine_value')),
                ('handshape_change', models.ForeignKey(db_column='handshape_change', on_delete=django.db.models.deletion.CASCADE, related_name='handshape_change', to='dictionary.FieldChoice', to_field='machine_value')),
            ],
            options={
                'ordering': ['idgloss'],
                'verbose_name_plural': 'Glosses',
                'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('can_publish', 'Can publish signs and definitions'), ('can_delete_unpublished', 'Can delete unpub signs or defs'), ('can_delete_published', 'Can delete pub signs and defs'), ('view_advanced_properties', 'Include all properties in sign detail view')),
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MorphologyDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('morpheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='morphemes', to='dictionary.Gloss')),
                ('parent_gloss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_glosses', to='dictionary.Gloss')),
                ('role', models.ForeignKey(blank=True, db_column='MorphologyType', on_delete=django.db.models.deletion.CASCADE, to='dictionary.FieldChoice', to_field='machine_value')),
            ],
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(blank=True, db_column='MorphologyType', on_delete=django.db.models.deletion.CASCADE, to='dictionary.FieldChoice', to_field='machine_value')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_sources', to='dictionary.Gloss')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_targets', to='dictionary.Gloss')),
            ],
            options={
                'ordering': ['source'],
            },
        ),
        migrations.CreateModel(
            name='RelationToForeignSign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loan', models.BooleanField(default=False, verbose_name='Loan Sign')),
                ('other_lang', models.CharField(max_length=20, verbose_name='Related Language')),
                ('other_lang_gloss', models.CharField(max_length=50, verbose_name='Gloss in related language')),
                ('gloss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss')),
            ],
            options={
                'ordering': ['gloss', 'loan', 'other_lang', 'other_lang_gloss'],
            },
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(verbose_name='Index')),
                ('gloss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss')),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Keyword')),
            ],
            options={
                'ordering': ['gloss', 'index'],
            },
        ),
        migrations.AddField(
            model_name='gloss',
            name='language',
            field=models.ManyToManyField(to='dictionary.Language'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='location',
            field=models.ForeignKey(blank=True, db_column='location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='movement_direction',
            field=models.ForeignKey(blank=True, db_column='movement_direction', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movement_direction', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Movement Direction'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='movement_manner',
            field=models.ForeignKey(blank=True, db_column='movement_manner', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movement_manner', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Movement Manner'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='movement_shape',
            field=models.ForeignKey(blank=True, db_column='movement_shape', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movement_shape', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Movement Shape'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='named_entity',
            field=models.ForeignKey(blank=True, db_column='named_entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='named_entity', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Named Entity'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='orientation_change',
            field=models.ForeignKey(blank=True, db_column='orientation_change', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orientation_change', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Orientation Change'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='relation_between_articulators',
            field=models.ForeignKey(blank=True, db_column='relation_between_articulators', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relation_between_articulators', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Relation Between Articulators'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='relative_orientation_location',
            field=models.ForeignKey(blank=True, db_column='relative_orientation_location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relative_orientation_location', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Relative Orientation: Location'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='relative_orientation_movement',
            field=models.ForeignKey(blank=True, db_column='relative_orientation_movement', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relative_orientation_movement', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Relative Orientation: Movement'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='semantic_field',
            field=models.ForeignKey(blank=True, db_column='semantic_field', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='semantic_field', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Semantic Field'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='strong_handshape',
            field=models.ForeignKey(blank=True, db_column='strong_handshape', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strong_handshape', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Strong Hand'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='weak_handshape',
            field=models.ForeignKey(blank=True, db_column='weak_handshape', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weak_handshape', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Weak Hand'),
        ),
        migrations.AddField(
            model_name='dialect',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language'),
        ),
        migrations.AddField(
            model_name='definition',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='absolute_orientation_fingers',
            field=models.ForeignKey(blank=True, db_column='absolute_orientation_fingers', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='absolute_orientation_fingers', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Absolute Orientation: Fingers'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='absolute_orientation_palm',
            field=models.ForeignKey(blank=True, db_column='absolute_orientation_palm', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='absolute_orientation_palm', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Absolute Orientation: Palm'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='contact_type',
            field=models.ForeignKey(blank=True, db_column='contact_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_type', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Contact Type'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='handedness',
            field=models.ForeignKey(blank=True, db_column='handedness', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='handedness', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Handedness'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='handshape_change',
            field=models.ForeignKey(blank=True, db_column='handshape_change', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='handshape_change', to='dictionary.FieldChoice', to_field='machine_value', verbose_name='Handshape Change'),
        ),
        migrations.AlterField(
            model_name='dialect',
            name='name',
            field=models.CharField(max_length=50),
        ),
        migrations.AddField(
            model_name='gloss',
            name='url_field',
            field=models.URLField(blank=True, verbose_name='URL'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_comments',
            field=models.CharField(blank=True, max_length=50, verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2015, 10, 16, 10, 42, 32, 21149, tzinfo=timezone.utc)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='gloss',
            name='created_by',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='created_by_user', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='gloss',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, default=datetime.datetime(2015, 10, 16, 10, 45, 56, 193255, tzinfo=timezone.utc)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='gloss',
            name='updated_by',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='updated_by_user', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='sense',
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='sn',
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_comments',
            field=models.CharField(blank=True, max_length=200, verbose_name='Comments'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_idgloss_hki',
            field=models.CharField(blank=True, help_text="\n    This is the Helsinki name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Helsinki Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=60, verbose_name='Gloss HKI'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_idgloss_hki_en',
            field=models.CharField(blank=True, help_text='\n    This is the English name for the corresponding Jyvaskyla Gloss', max_length=60, verbose_name='Gloss HKI (Eng)'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_idgloss_jkl',
            field=models.CharField(blank=True, help_text="\n    This is the Jyvaskyla name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Jyvaskyla Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=60, verbose_name='Gloss JKL'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='annotation_idgloss_jkl_en',
            field=models.CharField(blank=True, help_text='\n    This is the English name for the corresponding Jyvaskyla Gloss', max_length=60, verbose_name='Gloss JKL (Eng)'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='idgloss',
            field=models.CharField(help_text='\n    This is the unique identifying name of an entry of a sign form in the\ndatabase. No two Sign Entry Names can be exactly the same, but a "Sign\nEntry Name" can be (and often is) the same as the Annotation Idgloss.', max_length=60, verbose_name='Gloss'),
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('can_publish', 'Can publish signs and definitions'), ('can_delete_unpublished', 'Can delete unpub signs or defs'), ('can_delete_published', 'Can delete pub signs and defs'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('lock_gloss', 'Can lock and unlock Gloss from editing')), 'verbose_name_plural': 'Glosses'},
        ),
        migrations.AddField(
            model_name='gloss',
            name='locked',
            field=models.BooleanField(default=False, verbose_name='Locked'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='dialect',
            field=models.ManyToManyField(blank=True, to='dictionary.Dialect'),
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='language',
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='annotation_idgloss_hki',
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='annotation_idgloss_hki_en',
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='annotation_idgloss_jkl',
        ),
        migrations.RenameField(
            model_name='gloss',
            old_name='annotation_idgloss_jkl_en',
            new_name='idgloss_en',
        ),
        migrations.AlterField(
            model_name='gloss',
            name='idgloss_en',
            field=models.CharField(blank=True, help_text='This is the English name for the Gloss', max_length=60, verbose_name='Gloss in English'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='idgloss',
            field=models.CharField(help_text='This is the unique identifying name of a Gloss.', max_length=60, verbose_name='Gloss'),
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
                ('is_public', models.BooleanField(default=False, help_text='Tells whether this dataset is public or private')),
                ('description', models.TextField()),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language')),
            ],
        ),
        migrations.AddField(
            model_name='gloss',
            name='dataset',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='dictionary.Dataset'),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name='gloss',
            unique_together=set([('idgloss', 'dataset')]),
        ),
        migrations.AddField(
            model_name='language',
            name='language_code',
            field=models.CharField(help_text="ISO 639-3 language code, set as 'und' if you don't have a code. Please set this correctly to get translation\n        equivalents to work in search.", max_length=3),
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('can_publish', 'Can publish signs and definitions'), ('can_delete_unpublished', 'Can delete unpub signs or defs'), ('can_delete_published', 'Can delete pub signs and defs'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('lock_gloss', 'Can lock and unlock Gloss from editing'), ('import_csv', 'Can import glosses from a CSV file')), 'verbose_name_plural': 'Glosses'},
        ),
        migrations.AddField(
            model_name='translation',
            name='language',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language'),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name='translation',
            unique_together=set([('gloss', 'language', 'keyword')]),
        ),
        migrations.CreateModel(
            name='SignLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('language_code_3char', models.CharField(help_text='ISO 639-3 language code (3 characters long) of a sign language.', max_length=3)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.RunPython(
            code=generate_signlanguage,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='dataset',
            name='language',
        ),
        migrations.RemoveField(
            model_name='language',
            name='language_code',
        ),
        migrations.AddField(
            model_name='dataset',
            name='translation_languages',
            field=models.ManyToManyField(help_text='These languages are shown as optionsfor translation equivalents.', to='dictionary.Language'),
        ),
        migrations.AddField(
            model_name='language',
            name='language_code_2char',
            field=models.CharField(default='en', help_text='ISO 639-1 language code (2 characters long) of a written language.', max_length=2),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='language',
            name='language_code_3char',
            field=models.CharField(default='eng', help_text='ISO 639-3 language code (3 characters long) of a written language.', max_length=3),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='dataset',
            name='is_public',
            field=models.BooleanField(default=False, help_text='Is this dataset is public or private?'),
        ),
        migrations.AlterField(
            model_name='dialect',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.SignLanguage'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='signlanguage',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='dictionary.SignLanguage'),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('import_csv', 'Can import glosses from a CSV file'), ('can_publish', 'Can publish signs and definitions'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('lock_gloss', 'Can lock and unlock Gloss from editing')), 'verbose_name_plural': 'Glosses'},
        ),
        migrations.AlterField(
            model_name='gloss',
            name='dataset',
            field=models.ForeignKey(help_text='Dataset a gloss is part of', on_delete=django.db.models.deletion.CASCADE, to='dictionary.Dataset', verbose_name='Glosses dataset'),
        ),
        migrations.AddField(
            model_name='language',
            name='name_en',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.RunPython(
            code=set_langnames,
        ),
        migrations.AddField(
            model_name='language',
            name='name_fi',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.CreateModel(
            name='GlossTranslations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translations', models.TextField(blank=True)),
                ('gloss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='glosstranslations',
            unique_together=set([('gloss', 'language')]),
        ),
        migrations.AlterModelOptions(
            name='dataset',
            options={'permissions': (('view_dataset', 'View dataset'),), 'verbose_name': 'Lexicon', 'verbose_name_plural': 'Lexicons'},
        ),
        migrations.CreateModel(
            name='GlossRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='glossrelation_source', to='dictionary.Gloss')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='glossrelation_target', to='dictionary.Gloss')),
            ],
            options={
                'ordering': ['source'],
                'verbose_name': 'Gloss relation',
                'verbose_name_plural': 'Gloss relations',
            },
        ),
        migrations.CreateModel(
            name='GlossURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('gloss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss')),
            ],
            options={
                'verbose_name': 'Gloss URL',
                'verbose_name_plural': 'Gloss URLs',
            },
        ),
        migrations.RenameField(
            model_name='gloss',
            old_name='annotation_comments',
            new_name='notes',
        ),
        migrations.AlterField(
            model_name='gloss',
            name='notes',
            field=models.TextField(blank=True, verbose_name='Comments'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='notes',
            field=models.TextField(blank=True, verbose_name='Notes'),
        ),
        migrations.RenameField(
            model_name='gloss',
            old_name='locked',
            new_name='published',
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('import_csv', 'Can import glosses from a CSV file'), ('can_publish', 'Can publish signs and definitions'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('publish_gloss', 'Can publish and unpublish Glosses')), 'verbose_name_plural': 'Glosses'},
        ),
        migrations.AlterField(
            model_name='gloss',
            name='published',
            field=models.BooleanField(default=False, verbose_name='Published'),
        ),
        migrations.CreateModel(
            name='AllowedTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_tags', models.ManyToManyField(to='tagging.Tag')),
                ('content_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Allowed tags',
                'verbose_name_plural': 'Allowed tags',
            },
        ),
        migrations.AlterModelOptions(
            name='definition',
            options={'ordering': ['gloss', 'role', 'count'], 'verbose_name': 'Definition', 'verbose_name_plural': 'Definitions'},
        ),
        migrations.AlterModelOptions(
            name='dialect',
            options={'ordering': ['language', 'name'], 'verbose_name': 'Dialect', 'verbose_name_plural': 'Dialects'},
        ),
        migrations.AlterModelOptions(
            name='fieldchoice',
            options={'ordering': ['field', 'machine_value'], 'verbose_name': 'Field choice', 'verbose_name_plural': 'Field choices'},
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('import_csv', 'Can import glosses from a CSV file'), ('can_publish', 'Can publish signs and definitions'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('publish_gloss', 'Can publish and unpublish Glosses')), 'verbose_name': 'Gloss', 'verbose_name_plural': 'Glosses'},
        ),
        migrations.AlterModelOptions(
            name='glosstranslations',
            options={'verbose_name': 'Gloss translation field', 'verbose_name_plural': 'Gloss translation fields'},
        ),
        migrations.AlterModelOptions(
            name='keyword',
            options={'ordering': ['text'], 'verbose_name': 'Keyword', 'verbose_name_plural': 'Keywords'},
        ),
        migrations.AlterModelOptions(
            name='language',
            options={'ordering': ['name'], 'verbose_name': 'Written language', 'verbose_name_plural': 'Written languages'},
        ),
        migrations.AlterModelOptions(
            name='morphologydefinition',
            options={'verbose_name': 'Morphology definition', 'verbose_name_plural': 'Morphology definitions'},
        ),
        migrations.AlterModelOptions(
            name='relation',
            options={'ordering': ['source'], 'verbose_name': 'Relation', 'verbose_name_plural': 'Relations'},
        ),
        migrations.AlterModelOptions(
            name='relationtoforeignsign',
            options={'ordering': ['gloss', 'loan', 'other_lang', 'other_lang_gloss'], 'verbose_name': 'Relation to Foreign Sign', 'verbose_name_plural': 'Relations to Foreign Signs'},
        ),
        migrations.AlterModelOptions(
            name='signlanguage',
            options={'ordering': ['name'], 'verbose_name': 'Sign language', 'verbose_name_plural': 'Sign languages'},
        ),
        migrations.AlterModelOptions(
            name='translation',
            options={'ordering': ['gloss', 'index'], 'verbose_name': 'Translation equivalent', 'verbose_name_plural': 'Translation equivalents'},
        ),
        migrations.RunPython(
            code=move_url_fields_to_glossurl,
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='url_field',
        ),
        migrations.RemoveField(
            model_name='definition',
            name='gloss',
        ),
        migrations.AlterModelOptions(
            name='gloss',
            options={'ordering': ['idgloss'], 'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('import_csv', 'Can import glosses from a CSV file'), ('view_advanced_properties', 'Include all properties in sign detail view'), ('publish_gloss', 'Can publish and unpublish Glosses')), 'verbose_name': 'Gloss', 'verbose_name_plural': 'Glosses'},
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='is_proposed_new_sign',
        ),
        migrations.DeleteModel(
            name='Definition',
        ),
        migrations.RemoveField(
            model_name='gloss',
            name='in_web_dictionary',
        ),
        migrations.AddField(
            model_name='signlanguage',
            name='name_en',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='signlanguage',
            name='name_fi',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterModelOptions(
            name='translation',
            options={'ordering': ['gloss', 'order'], 'verbose_name': 'Translation equivalent', 'verbose_name_plural': 'Translation equivalents'},
        ),
        migrations.RenameField(
            model_name='translation',
            old_name='index',
            new_name='order',
        ),
        migrations.AlterField(
            model_name='translation',
            name='order',
            field=models.IntegerField(verbose_name='Order'),
        ),
        migrations.AlterModelOptions(
            name='translation',
            options={'ordering': ['gloss', 'language', 'order'], 'verbose_name': 'Translation equivalent', 'verbose_name_plural': 'Translation equivalents'},
        ),
        migrations.AlterModelOptions(
            name='glosstranslations',
            options={'ordering': ['language'], 'verbose_name': 'Gloss translation field', 'verbose_name_plural': 'Gloss translation fields'},
        ),
        migrations.AlterModelOptions(
            name='language',
            options={'ordering': ['-name'], 'verbose_name': 'Written language', 'verbose_name_plural': 'Written languages'},
        ),
        migrations.RenameField(
            model_name='dataset',
            old_name='description',
            new_name='public_name',
        ),
        migrations.AddField(
            model_name='dataset',
            name='copyright',
            field=models.TextField(verbose_name='Copyright'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='description',
            field=models.TextField(verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='is_public',
            field=models.BooleanField(default=False, help_text='Is this dataset is public or private?', verbose_name='Is public'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='name',
            field=models.CharField(max_length=60, unique=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='public_name',
            field=models.CharField(max_length=60, unique=True, verbose_name='Public name'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='copyright_en',
            field=models.TextField(null=True, verbose_name='Copyright'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='copyright_fi',
            field=models.TextField(null=True, verbose_name='Copyright'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='description_en',
            field=models.TextField(null=True, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='description_fi',
            field=models.TextField(null=True, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='public_name_en',
            field=models.CharField(max_length=60, null=True, verbose_name='Public name'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='public_name_fi',
            field=models.CharField(max_length=60, null=True, verbose_name='Public name'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='public_name',
            field=models.CharField(max_length=60, verbose_name='Public name'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='admins',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterModelOptions(
            name='dataset',
            options={'ordering': ['id'], 'permissions': (('view_dataset', 'View dataset'),), 'verbose_name': 'Lexicon', 'verbose_name_plural': 'Lexicons'},
        ),
        migrations.AddField(
            model_name='gloss',
            name='exclude_from_ecv',
            field=models.BooleanField(default=False, help_text='Exclude from ELAN externally controlled vocabularies (ECV)', verbose_name='Exclude from ECV'),
        ),
        migrations.AlterField(
            model_name='allowedtags',
            name='allowed_tags',
            field=models.ManyToManyField(to='tagging.Tag', verbose_name='Allowed tags'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='admins',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Admins'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='signlanguage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.SignLanguage', verbose_name='Sign language'),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='translation_languages',
            field=models.ManyToManyField(help_text='These languages are options for translation equivalents.', to='dictionary.Language', verbose_name='Translation equivalent languages'),
        ),
        migrations.AlterField(
            model_name='dialect',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.SignLanguage', verbose_name='Sign language'),
        ),
        migrations.AlterField(
            model_name='gloss',
            name='published',
            field=models.BooleanField(default=False, help_text='Publish this gloss in the public gloss list', verbose_name='Published'),
        ),
        migrations.AlterField(
            model_name='glosstranslations',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss', verbose_name='Gloss'),
        ),
        migrations.AlterField(
            model_name='glosstranslations',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language', verbose_name='Language'),
        ),
        migrations.AlterField(
            model_name='glossurl',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss', verbose_name='Gloss'),
        ),
        migrations.AlterField(
            model_name='translation',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss', verbose_name='Gloss'),
        ),
        migrations.AlterField(
            model_name='translation',
            name='keyword',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Keyword', verbose_name='Keyword'),
        ),
        migrations.AlterField(
            model_name='translation',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language', verbose_name='Language'),
        ),
    ]
